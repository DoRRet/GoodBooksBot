import json
import os
import sqlite3
import telegram
import random
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters

load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_CHAT_ID = 6984945831
SEARCH_BOOK = "SEARCH_BOOK"
# 808174847 –º
# 6984945831 —Ç


HISTORY_FILE = 'message_history.json'
ANON_FILE = 'anonymous_messages.json'
USER_STATUS_FILE = 'user_status.json'

def load_message_history():
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as file:
                loaded_history = json.load(file)
                return {int(key): value for key, value in loaded_history.items()}
        else:
            print(f"–§–∞–π–ª {HISTORY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {}
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {HISTORY_FILE}: {e}")
        return {}

def save_message_history():
    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as file:
            json.dump({str(key): value for key, value in message_history.items()}, file, ensure_ascii=False, indent=4)
        print("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {HISTORY_FILE}: {e}")

def load_anonymous_messages():
    try:
        if os.path.exists(ANON_FILE):
            with open(ANON_FILE, 'r', encoding='utf-8') as file:
                return json.load(file)
        else:
            print(f"–§–∞–π–ª {ANON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {ANON_FILE}: {e}")
        return []

def save_anonymous_messages():
    try:
        with open(ANON_FILE, 'w', encoding='utf-8') as file:
            json.dump(anonymous_messages, file, ensure_ascii=False, indent=4)
        print("–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {ANON_FILE}: {e}")

def load_user_status():
    default_status = {"active_users": [], "inactive_users": []}
    if not os.path.exists(USER_STATUS_FILE):
        return default_status

    try:
        with open(USER_STATUS_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
            active_users = [user for user in data.get("active_users", []) if user != ADMIN_CHAT_ID]
            inactive_users = data.get("inactive_users", [])
            return {
                "active_users": active_users,
                "inactive_users": inactive_users,
            }
    except (IOError, json.JSONDecodeError) as e:
        print(f"Error reading {USER_STATUS_FILE}: {e}")
        return default_status

def save_user_status(active_users, inactive_users):
    try:
        with open(USER_STATUS_FILE, 'w', encoding='utf-8') as file:
            json.dump({"active_users": active_users, "inactive_users": inactive_users}, file, ensure_ascii=False, indent=4)
        print("–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {USER_STATUS_FILE}: {e}")

user_status = load_user_status()

user_admin_chat = {}
active_dialogs = {}
message_history = load_message_history()
anonymous_messages = load_anonymous_messages()
book_titles = {}
is_recording_user = {}
is_recording_admin = False
is_admin_reply_mode = False


async def start(update, context):
    user = update.effective_user

    context.user_data.pop('awaiting_reply_user_id', None)
    global is_recording_admin, is_admin_reply_mode
    is_recording_admin = False
    is_admin_reply_mode = False

    await send_welcome_message(update, context, user)

    if not context.user_data.get('initialized'):
        context.user_data['initialized'] = True

    if user.id == ADMIN_CHAT_ID:
        await show_admin_menu(update, context)
    else:
        await show_main_menu(update, context)


async def send_welcome_message(update, context, user):
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ 'Good Books'.\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @biblioteka_gb üíå"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text)


async def show_main_menu(update: Update, context: CallbackContext):
    buttons = [
        ["üìö –ü—Ä–µ–¥–ª–æ–∂–∫–∞"],
        ["üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"],
        ["üëã –ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
        ["‚úçÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∂–∞–ª–æ–±–∞"],
        ["üòπ –ú–µ–º—á–∏–∫"]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

SEARCH_BOOK = "SEARCH_BOOK"


async def handle_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    message = update.message
    text = message.text if message.text else ""
    global user_status, is_admin_reply_mode

    if context.user_data.get('ignore_next_message'):
        context.user_data['ignore_next_message'] = False
        return

    buttons = [
        ["–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    if text.lower() == "–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è" or text.lower() == "/start":
        context.user_data['awaiting_suggestion'] = False
        context.user_data['awaiting_search_query'] = False
        context.user_data['awaiting_admin_message'] = False
        context.user_data['awaiting_anonymous_suggestion'] = False
        context.user_data.pop('awaiting_reply_user_id', None)

        if user.id == ADMIN_CHAT_ID:
            is_admin_reply_mode = False
            await show_admin_menu(update, context)
        else:
            await show_main_menu(update, context)
        return

    if text.lower() == "üòπ –º–µ–º—á–∏–∫":
        await send_random_meme(update, context)
        return

    if text.lower() == "–º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        if user.id == ADMIN_CHAT_ID:
            await show_main_menu(update, context)
        return

    if text.lower() == "üîç –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏":
        context.user_data['awaiting_search_query'] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)
        return

    if context.user_data.get('awaiting_search_query'):
        await handle_search_query(update, context, text)
        return

    if text.lower() == "–ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏" and user.id == ADMIN_CHAT_ID:
        await show_active_dialogs(update, context)
        return

    if text.lower() == "üëã –ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        context.user_data['awaiting_admin_message'] = True
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å–∫–æ—Ä–æ –æ–Ω –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç‚ö°Ô∏è", reply_markup=reply_markup)
        return

    if context.user_data.get('awaiting_admin_message'):
        context.user_data['awaiting_admin_message'] = False
        if user.id not in user_status['active_users']:
            user_status['active_users'].append(user.id)
        if user.id in user_status['inactive_users']:
            user_status['inactive_users'].remove(user.id)
        save_user_status(user_status['active_users'], user_status['inactive_users'])

        # Save user message history
        if user.id not in message_history:
            message_history[user.id] = []
        message_history[user.id].append({
            "from": "user",
            "text": text,
            "timestamp": update.message.date.isoformat()
        })
        save_message_history()

        # Save admin message history
        if ADMIN_CHAT_ID not in message_history:
            message_history[ADMIN_CHAT_ID] = []
        message_history[ADMIN_CHAT_ID].append({
            "from": "user",
            "text": text,
            "timestamp": update.message.date.isoformat()
        })
        save_message_history()

        admin_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: {user.id}):\n{text}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=reply_markup)
        return

    if text.lower() == "üìö –ø—Ä–µ–¥–ª–æ–∂–∫–∞":
        context.user_data['awaiting_suggestion'] = True
        await update.message.reply_text("–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —É –í–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –Ω–∞–º!) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∞ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è, —á—Ç–æ–±—ã –æ–Ω–∞ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤ –ø—Ä–æ–¥–∞–∂—É ‚ù§Ô∏è", reply_markup=reply_markup)
        return

    if context.user_data.get('awaiting_suggestion'):
        context.user_data['awaiting_suggestion'] = False

        info_message = (
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{user.username}:\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}\n"
            #f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n"
        )

        if message.text:
            info_message += f"–¢–µ–∫—Å—Ç: {message.text}"
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=info_message)
        else:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=info_message)
            await context.bot.forward_message(chat_id=ADMIN_CHAT_ID, from_chat_id=message.chat_id, message_id=message.message_id)

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–º–æ—Ç—Ä–∏–º—Å—è –∫ –í–∞—à–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—éü§ù‚ù§Ô∏è\n"
            "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–ü—Ä–µ–¥–ª–æ–∂–∫–∞' –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä",
            reply_markup=reply_markup
        )
        return

    if text.lower() == "‚úçÔ∏è –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∂–∞–ª–æ–±–∞":
        context.user_data['awaiting_anonymous_suggestion'] = True
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∂–∞–ª–æ–±—É. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º", reply_markup=reply_markup)
        return

    if context.user_data.get('awaiting_anonymous_suggestion'):
        context.user_data['awaiting_anonymous_suggestion'] = False
        anonymous_message = update.message.text
        anonymous_messages.append(anonymous_message)
        save_anonymous_messages()
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∂–∞–ª–æ–±–∞:\n{anonymous_message}"
        )
        await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚úÖ")
        return

    if user.id in active_dialogs and active_dialogs[user.id] == SEARCH_BOOK:
        await handle_search_query(update, context, text)
        return

    if user.id == ADMIN_CHAT_ID:
        await handle_admin_message(update, context)
        return

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=reply_markup)




async def handle_search_query(update: Update, context: CallbackContext, query: str):
    books = search_books(query)

    buttons = [
        [InlineKeyboardButton(book['title'], callback_data=f"select_book_{book['id']}")] for book in books
    ]

    if books:
        reply_markup = InlineKeyboardMarkup(buttons)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞):",
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞."
        )

async def show_book_details(update: Update, context: CallbackContext, book_id: int):
    book = get_book_by_id(book_id)

    if book:
        buttons = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –Ω–∞ –ê–≤–∏—Ç–æ", callback_data=f"buy_avito_{book['id']}")],
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –Ω–∞ –û–∑–æ–Ω", callback_data=f"buy_ozon_{book['id']}")],
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –Ω–∞ –í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑", callback_data=f"buy_wb_{book['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        if book["image_url"]:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=book["image_url"],
                caption=f"üìö {book['title']}\nüí∞ –¶–µ–Ω–∞: {book['price']}\nüì¶ –ù–∞–ª–∏—á–∏–µ: {book['availability']}",
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üìö {book['title']}\nüí∞ –¶–µ–Ω–∞: {book['price']}\nüì¶ –ù–∞–ª–∏—á–∏–µ: {book['availability']}\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
                reply_markup=reply_markup
            )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )

async def button_click_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.from_user
    data = query.data

    if data.startswith("select_book_"):
        book_id = int(data.split('_')[2])
        await show_book_details(update, context, book_id)
        await query.answer()

    elif data.startswith("buy_"):
        platform, book_id = data.split('_')[1:3]
        platform_name = {
            "avito": "–ê–≤–∏—Ç–æ",
            "ozon": "–û–∑–æ–Ω",
            "wb": "–í–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑"
        }[platform]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        book_title = book_titles.get(int(book_id), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞")

        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        if user.id not in message_history:
            message_history[user.id] = []
        message_history[user.id].append({
            "from": user.id,
            "text": f"–ü—Ä–æ—Å–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É '{book_title}' –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform_name}",
            "timestamp": update.callback_query.message.date.isoformat()
        })
        save_message_history()

        # –û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        if user.id not in user_status['active_users']:
            user_status['active_users'].append(user.id)
        if user.id in user_status['inactive_users']:
            user_status['inactive_users'].remove(user.id)
        save_user_status(user_status['active_users'], user_status['inactive_users'])

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {user.id}) –≤—ã–±—Ä–∞–ª –ø–æ–∫—É–ø–∫—É –∫–Ω–∏–≥–∏ '{book_title}' –Ω–∞ {platform_name}."
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –Ω–∞ {platform_name}. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –∏ —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª–µ—Ç —Å—Å—ã–ª–∫—É."
        await context.bot.send_message(chat_id=user.id, text=user_message)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await query.answer()



async def handle_admin_message(update: Update, context: CallbackContext):
    global is_admin_reply_mode
    user = update.message.from_user
    text = update.message.text

    if user.id == ADMIN_CHAT_ID:
        if text.lower() == "–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è" or text == "/start":
            is_admin_reply_mode = False
            context.user_data.pop('awaiting_reply_user_id', None)
            await update.message.reply_text("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω.", reply_markup=ReplyKeyboardMarkup([["–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]], resize_keyboard=True))
            await show_admin_menu(update, context)
            return

        if text.lower() == "–∑–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥":
            if 'awaiting_reply_user_id' in context.user_data:
                user_id = context.user_data['awaiting_reply_user_id']
                await close_dialog_command(update, context, user_id)
                is_admin_reply_mode = False
                context.user_data.pop('awaiting_reply_user_id', None)
            else:
                await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
            return

        if text.lower().startswith("/closedia"):
            parts = text.split()
            if len(parts) == 2:
                await close_dialog_command(update, context, parts[1])
            else:
                await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /closedia <user_id>")
            return

        if is_admin_reply_mode:
            if 'awaiting_reply_user_id' in context.user_data:
                user_id = context.user_data['awaiting_reply_user_id']

                try:
                    user_id = int(user_id)

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}")
                    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π
                    if user_id not in user_status['active_users']:
                        user_status['active_users'].append(user_id)
                    if user_id in user_status['inactive_users']:
                        user_status['inactive_users'].remove(user_id)
                    save_user_status(user_status['active_users'], user_status['inactive_users'])

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if user_id not in message_history:
                        message_history[user_id] = []
                    message_history[user_id].append({
                        "from": "admin",
                        "text": text,
                        "timestamp": update.message.date.isoformat()
                    })
                    save_message_history()

                except Exception as e:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            return

        if text.startswith('/reply'):
            parts = text.split(' ', 2)
            if len(parts) < 3:
                await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
                return
            user_id = parts[1]
            reply_message = parts[2]

            try:
                user_id = int(user_id)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{reply_message}")
                await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π
                if user_id not in user_status['active_users']:
                    user_status['active_users'].append(user_id)
                if user_id in user_status['inactive_users']:
                    user_status['inactive_users'].remove(user_id)
                save_user_status(user_status['active_users'], user_status['inactive_users'])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if user_id not in message_history:
                    message_history[user_id] = []
                message_history[user_id].append({
                    "from": "admin",
                    "text": reply_message,
                    "timestamp": update.message.date.isoformat()
                })
                save_message_history()

            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

    await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")


async def notify_admin(update: Update, context: CallbackContext):
    user = update.callback_query.from_user
    admin_message = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} ({user.id}) —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} {user.last_name or ''}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    user_admin_chat[user.id] = ADMIN_CHAT_ID
    active_dialogs[user.id] = True

async def send_random_meme(update: Update, context: CallbackContext):
    meme_folder = '/root/GoodBooksBot/memes'
    meme_files = os.listdir(meme_folder)
    meme_file = random.choice(meme_files)
    meme_path = os.path.join(meme_folder, meme_file)

    if meme_file.endswith(".jpg") or meme_file.endswith(".png"):
        with open(meme_path, 'rb') as photo:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo)
    elif meme_file.endswith(".gif"):
        with open(meme_path, 'rb') as gif:
            await context.bot.send_animation(chat_id=update.effective_chat.id, animation=gif)
    elif meme_file.endswith(".mp4"):
        with open(meme_path, 'rb') as video:
            await context.bot.send_video(chat_id=update.effective_chat.id, video=video)


async def show_help(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–ê–¥–º–∏–Ω –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏ –∏ –í–∞—Åü•∞")
        return

    help_message = (
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
        "/users - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/history <user_id> - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "/closedia <user_id> - –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "/clearchat <user_id> - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "/anon - –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/clearanonall - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/clearanon <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É\n"
    )
    await update.message.reply_text(help_message)

async def show_admin_menu(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    buttons = [
        ["–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"],
        ["–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

async def close_dialog_command(update: Update, context: CallbackContext, user_id: str):
    global user_status

    try:
        target_user_id = int(user_id)
        if target_user_id in user_status['active_users']:
            user_status['active_users'].remove(target_user_id)
            user_status['inactive_users'].append(target_user_id)
            save_user_status(user_status['active_users'], user_status['inactive_users'])
            await update.message.reply_text(f"–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_user_id} –∑–∞–∫—Ä—ã—Ç.")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def close_dialog(update: Update, context: CallbackContext):
    user = update.message.from_user
    if user.id == ADMIN_CHAT_ID:
        await close_dialog_command(update, context, context.args[0])
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def show_users(update: Update, context: CallbackContext):
    global user_status

    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    active_users_message = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    inactive_users_message = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"

    user_status = load_user_status()

    for user_id in user_status['active_users']:
        user_info = await context.bot.get_chat(user_id)
        username = f"@{user_info.username}" if user_info.username else user_info.first_name
        active_users_message += f"ID: {user_id}, Username: {username}\n"

    for user_id in user_status['inactive_users']:
        user_info = await context.bot.get_chat(user_id)
        username = f"@{user_info.username}" if user_info.username else user_info.first_name
        inactive_users_message += f"ID: {user_id}, Username: {username}\n"

    users_message = active_users_message + "\n" + "*"*10 + "\n" + inactive_users_message
    await update.message.reply_text(users_message)

async def show_user_history(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        user_id = int(context.args[0])
        if user_id in message_history:
            history = message_history[user_id]
            user_info = await context.bot.get_chat(user_id)
            username = f"@{user_info.username}" if user_info.username else ""
            history_message = f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} ({username}):\n"
            for message in history:
                sender = "–ê–¥–º–∏–Ω" if message['from'] == 'admin' else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                history_message += f"{sender}: {message['text']}\n"
            await update.message.reply_text(history_message)
        else:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Å—Ç–∞.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def show_active_dialogs(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    user_status = load_user_status()
    active_users = user_status['active_users']

    if not active_users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")
        return

    messages = []
    buttons = []
    for user_id in active_users:
        last_message = message_history.get(user_id, [])
        if last_message:
            last_message = last_message[-1]
            last_text = last_message.get("text", "No text")
            last_time = last_message.get("timestamp", "No timestamp")
            if last_message.get("from") == "admin":
                messages.append(f"‚úÖ  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {last_text}\n–í—Ä–µ–º—è: {last_time}\n")
            else:
                messages.append(f"üÜò  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {last_text}\n–í—Ä–µ–º—è: {last_time}\n")
            buttons.append([InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å {user_id}", callback_data=f"reply_{user_id}")])
        else:
            messages.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n")
            buttons.append([InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å {user_id}", callback_data=f"reply_{user_id}")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_html("<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:</b>\n\n" + "\n".join(messages), reply_markup=reply_markup)

async def handle_reply_callback(update: Update, context: CallbackContext):
    global is_admin_reply_mode
    query = update.callback_query
    await query.answer()

    user_id = query.data.split('_')[1]
    context.user_data['awaiting_reply_user_id'] = user_id
    is_admin_reply_mode = True

    buttons = [
        ["–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥"]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await query.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=reply_markup)


async def clearchat(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clearchat <user_id>")
        return

    try:
        user_id = int(args[0])
        if user_id in message_history:
            del message_history[user_id]
            save_message_history()
            await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await update.message.reply_text("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.")


async def show_anonymous_messages(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if anonymous_messages:
        anon_messages = "\n\n".join([f"{index + 1}. {msg}" for index, msg in enumerate(anonymous_messages)])
        await update.message.reply_text(f"–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{anon_messages}")
    else:
        await update.message.reply_text("–ê–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")

async def clear_anonymous_messages(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    anonymous_messages.clear()
    save_anonymous_messages()
    await update.message.reply_text("–í—Å–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")

async def clear_one_anonymous_message(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        message_index = int(context.args[0]) - 1
        if 0 <= message_index < len(anonymous_messages):
            del anonymous_messages[message_index]
            save_anonymous_messages()
            await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {message_index + 1} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.")



SEARCH_BOOK = 1
def search_books(query):
    global book_titles
    try:
        conn = sqlite3.connect('books.db')
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, title, price, image_url, availability
            FROM Book
        """)

        rows = cursor.fetchall()
        books = [
            {
                "id": row[0],
                "title": row[1],
                "price": row[2],
                "image_url": row[3],
                "availability": row[4]
            }
            for row in rows
        ]

        query_lower = query.lower()
        filtered_books = [
            book for book in books
            if query_lower in book['title'].lower()
        ]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å book_titles
        for book in books:
            book_titles[book['id']] = book['title']

        conn.close()
        return filtered_books

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def get_book_by_id(book_id):
    try:
        conn = sqlite3.connect('books.db')
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, title, price, image_url, availability
            FROM Book
            WHERE id = ?
        """, (book_id,))

        row = cursor.fetchone()
        if row:
            book = {
                "id": row[0],
                "title": row[1],
                "price": row[2],
                "image_url": row[3],
                "availability": row[4]
            }
            conn.close()
            return book
        else:
            conn.close()
            return None

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ: {e}")
        return None

def main():
    global message_history, active_dialogs
    load_message_history()
    load_anonymous_messages()

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(CommandHandler("users", show_users))
    application.add_handler(CommandHandler("history", show_user_history))
    application.add_handler(CommandHandler("closedia", close_dialog))
    application.add_handler(CommandHandler("clearchat", clearchat))
    application.add_handler(CommandHandler("anon", show_anonymous_messages))
    application.add_handler(CommandHandler("clearanonall", clear_anonymous_messages))
    application.add_handler(CommandHandler("clearanon", clear_one_anonymous_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_reply_callback, pattern=r"^reply_"))
    application.add_handler(CallbackQueryHandler(button_click_handler))
    application.add_handler(CallbackQueryHandler(show_book_details, pattern=r"^show_"))

    application.add_handler(MessageHandler(
        filters.TEXT & filters.ChatType.PRIVATE & filters.User(ADMIN_CHAT_ID),
        handle_admin_message
    ))

    application.add_handler(MessageHandler(
        filters.TEXT & filters.ChatType.PRIVATE & ~filters.User(ADMIN_CHAT_ID),
        handle_message
    ))

    application.add_handler(MessageHandler(
        filters.PHOTO & filters.ChatType.PRIVATE,
        handle_message
    ))

    application.add_handler(MessageHandler(
        filters.VIDEO & filters.ChatType.PRIVATE,
        handle_message
    ))

    application.add_handler(MessageHandler(
        filters.ANIMATION & filters.ChatType.PRIVATE,
        handle_message
    ))

    application.run_polling()

if __name__ == '__main__':
    main()